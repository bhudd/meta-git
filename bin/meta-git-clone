#!/usr/bin/env node

const exec = require('meta-exec');
const fs = require('fs');
const debug = require('debug')('meta-git-clone');
const getMetaFile = require('get-meta-file');
const path = require('path');
const program = require('commander');
const util = require('util');
const assertUsage = require('../lib/assertUsage');


const repoUrlUnescaped = process.argv[2] === 'blank' ? process.argv[3] : process.argv[2];
const repoUrl = repoUrlUnescaped.replace(/[;|]/gi, ''); // Escape potential harmful characters to fix a Command Execution

const args = require('minimist')(process.argv, {
  alias: {b:'branch'},
  default: { branch: 'master'}
});
const repoBranch = args['branch'];

if (process.argv[2] === '--help') return console.log(usage);

if (!assertUsage('meta git clone', usage, { allow: /.*/ }))
  return console.log(usage);

exec({ cmd: `git clone ${repoUrl} ${dirname}`, displayDir: dirname }, (err, result) => {
  if (err) throw err;

  const newDir = path.resolve(dirname);

  debug(`chdir to ${newDir}`);

  process.chdir(newDir);

  const meta = getMetaFile();

  const projects = meta.projects;
  const folders = Object.keys(projects);

  var folder = null;

  function child(err) {
    if (err) throw err;

    if (!folders.length) return 0;

    folder = folders.pop();

    const gitUrl = projects[folder];

    exec(
      {
        cmd: `git clone ${gitUrl} ${folder}`,
        displayDir: path.join(newDir, folder),
      },
      err => {
        if (err) throw err;

        if (repoBranch !== 'master') {
          console.log(`git checkout ${repoBranch}`);
          exec(
            {
              command: `git checkout ${repoBranch}`,
              displayDir: newDir,
            },
            cb,
            err => {
              throw err;
            }
          );
        }

        child();
      }
    );
  }

  child();
});