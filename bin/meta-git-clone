#!/usr/bin/env node

const exec = require('meta-exec');
const fs = require('fs');
const debug = require('debug')('meta-git-clone');
const getMetaFile = require('get-meta-file');
const path = require('path');
const program = require('commander');
const util = require('util');
const assertUsage = require('../lib/assertUsage');


const usage = `
usage:
       meta git clone [(-b| --branch) <name> ] [--] <repository> [<directory>]
       `;

if (process.argv[2] === '--help') return console.log(usage);

if (!assertUsage('meta git clone', usage, { allow: /.*/ }))
  return console.log(usage);


const args = require('minimist')(process.argv, {
  boolean: 'recursive',
  alias: {b:'branch'},
  default: { branch: 'master',
             recursive: false }
});

const repoUrl =  args['_'][2] === 'blank' ?  args['_'][3] :  args['_'][2];

let dirname =  args['_'][3] === 'blank' ? args['_'][4] :  args['_'][3];

if (!dirname)
  dirname=path.basename(repoUrl).replace('.git', '');

const repoBranch = args['branch'];

const recursiveCB = args['recursive'] ? gitCloneChildRepos : null;

console.log(`meta git cloning into \'${repoUrl}\' at ${dirname}`);

gitCloneRepo(repoUrl,dirname,repoBranch,gitCloneChildRepos);

function gitCloneRepo(repoUrl, dirname, branch, cb) {
  exec(
    { cmd: `git clone ${repoUrl} ${dirname};`, displayDir: dirname },
    (err, result) => {
      if (err) throw err;

      const cwd = process.cwd();
      const newDir = path.resolve(dirname);

      debug(`chdir to ${newDir}`);

      process.chdir(newDir);

      if (branch !== 'master') {
        exec(
          {
            command: `git checkout ${branch}`,
            displayDir: newDir,
          },
          cb,
          err => {
            throw err;
          }
        );
      }
      else {
        if (cb) cb();
      }

      process.chdir(cwd);
    }
  );
}


function gitCloneChildRepos() {
   if (fs.existsSync('.meta')) {
     const meta = getMetaFile();

     const projects = meta.projects;
     const branches = meta.branches;
     const folders = Object.keys(projects);

     var folder = null;

     while (folders.length) {
       folder = folders.pop();
       gitCloneRepo(projects[folder], path.join(process.cwd(), folder), branches[folder], recursiveCB);
     }
   }
}


